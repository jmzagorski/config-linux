snippet jobs "List of all jobs"
select
	s.name
	,l.name
from
	msdb..sysjobs AS s
	left outer join
		master.sys.syslogins AS l
			on s.owner_sid = l.sid
endsnippet

snippet jobhistory "MSSQL query for jobshistory"
select
	j.name as 'JobName'
	, run_date,
	, run_time,
	, msdb.dbo.agent_datetime(run_date, run_time) as 'RunDateTime'
from
	msdb.dbo.sysjobs j
	inner join
		msdb.dbo.sysjobhistory h
			on j.job_id = h.job_id
where
	j.enabled = 1  --Only Enabled Jobs
order by
	JobName
	, RunDateTime desc
endsnippet

snippet failedjobs "MSSQL query for failed jobs"
select
	j.name
	, js.step_name
	, jh.sql_severity
	, jh.message
	, jh.run_date
	, jh.run_time
from
	msdb.dbo.sysjobs AS j
	inner join
		msdb.dbo.sysjobsteps AS js
			on js.job_id = j.job_id
	inner join
		msdb.dbo.sysjobhistory AS jh
			on jh.job_id = j.job_id
where
	jh.run_status = 0
order by
	run_date desc
endsnippet

snippet sp "MSSQL default for creating a stored procedure"
create procedure ${4:dbo}.${5:}
	@${6}
as
begin

	set nocount on;
	-- this will help runtime errors, specifically if there is a timeout the transaction will abort
	set xact_abort on;

	begin try
		declare @trancount int = @@TRANCOUNT;
		-- if this is zero that means the caller was not in a transaction to begin with
		-- if it is not zero that means a transaction is in progress and i want to save my trans so it has no affect on @@TRANCOUNT
		if @trancount = 0
			begin transaction
		else
			save transaction $5;

		-- store procedure logic
		${0}

		if @trancount = 0
			commit;
	end try
	begin catch
		declare @error int, @message varchar(4000), @xstate int;
		select
			@error = error_number()
			, @message = error_message()
			, @xstate = xact_state();
		-- if the entire transaction is doomed
		if @xstate = -1
			rollback;
		-- the transaction is commitable and this procedure is the only one
		if @xstate = 1 and @trancount = 0
			rollback
		-- the transaction is commitable and this is a nested transaction
		if @xstate = 1 and @trancount > 0
			rollback transaction $5;
		-- rethrow the error to the caller so we do not swallow it
		raiserror ('$5: %d: %s', 16, 1, @error, @message) ;
	end catch
end
go
endsnippet

snippet vw "MSSQL default for creating a view"
create view ${4: schema}.${5: ViewName}
as
	${0}
endsnippet

snippet tr "MSSQL default for creating a trigger"
create trigger ${4: schema}.${5: TriggerName}
on $4.${6: TableName}
${7: TriggerType}
as
begin

	set nocount on;

	${0}

end
endsnippet

snippet tvf "MSSQL inline table value function"
create function ${4:dbo}.${5}
(
	@${6}
)
returns table
as
return
(
	${0}
)
endsnippet

snippet doc "Snippet for documenting objects"
-- ============================================================================
-- Author:		  ${1: LastFirst}
-- Create date: ${2: CreateDate}
-- Description:	${3: Description}
-- ============================================================================
${0}
endsnippet

snippet head "Snippet for top of file to set flags"
set nocount on;
go
set ansi_nulls on;
go
set quoted_identifier on;
go
${0}
endsnippet

snippet desc "Snippet for documenting objects"
EXEC sp_${1: AddOrupdate}extendedproperty
	@name = N'MS_Description'
	,@value = N'${2}'
	,@level0type = N'Schema', @level0name = '${3}'
	,@level1type = N'Table',  @level1name = '${4}'
	,@level2type = N'Column', @level2name = '${5}';
endsnippet
