snippet xfact "xunit fact test"
[Fact]
public void ${1:`!v vim_snippets#Filename('$1', 'title')`}_${2:StateUnderTest}_${3:ExpectedBehavior}()
{
	/* Arrange */
	${0}

	/* Act */

	/* Assert */
}
endsnippet

snippet xtheoryinline "xunit theory with inline data"
[Theory]
[InlineData(${1:Args})]
public void ${2:`!v vim_snippets#Filename('$1', 'title')`}_${3:StateUnderTest}_${4:ExpectedBehavior}(${5:Args})
{
	/* Arrange */
	${0}

	/* Act */

	/* Assert */
}
endsnippet

snippet xfactthrow "xunit fact test checking for exception"
[Fact]
public void ${1:`!v vim_snippets#Filename('$1', 'title')`}_${2:StateUnderTest}_${3:ExceptionThrown}()
{
	/* Arrange */
	void shouldthrow() => ${4:Action}

	/* Act */
	var ex = Record.Exception((Action)shouldThrow);

	/* Assert */
	Assert.IsType<${5:Exception}>(ex);${0}
}
endsnippet

snippet xtheorythrow "xunit theory test to check when multiple args should throw"
public static IEnumerable<object[]> $1
{
	get
	{
		return new []
		{
			new object[] { ${8:arg} }${0}
		};
	}
}

[Theory, MemberData(nameof(${1:ArgName}))]
public void ${2:`!v vim_snippets#Filename('$1', 'title')`}_$1_${4:ExceptionThrown}(${5:Args})
{
	/* Arrange */
	void shouldThrow() => ${6:Action};

	/* Act */
	var ex = Record.Exception((Action)shouldThrow);

	/* Assert */
	Assert.IsType<${7:Exception}>(ex);${0}
}
endsnippet

snippet xtheorydata "xunit theory test with data"
public static IEnumerable<object[]> $1
{
	get
	{
		return new []
		{
			new object[] { ${8:arg} }${0}
		};
	}
}

[Theory, MemberData(nameof(${1:ArgName}))]
public void ${2:`!v vim_snippets#Filename('$1', 'title')`}_$1_${4:ExpectedBehavior}(${5:Args})
{
	/* Arrange */

	/* Act */

	/* Assert */
}
endsnippet
