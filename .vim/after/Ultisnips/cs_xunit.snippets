snippet xfact "xunit fact test"
[Fact]
public void ${1:UnitOfWork}_${2:StateUnderTest}_${3:ExpectedBehavior}()
{
	// Arrange
	${0}

	// Act

	// Assert
}
endsnippet

snippet xtheoryinline "xunit theory with inline data"
[Theory]
[InlineData(${1:Args})]
public void ${2:UnitOfWork}_${3:StateUnderTest}_${4:ExpectedBehavior}(${5:Args})
{
	// Arrange
	${0}

	// Act

	// Assert
}
endsnippet

snippet xfactthrow "xunit fact test checking for exception"
[Fact]
public void ${1:UnitOfWork}_${2:StateUnderTest}_${3:ExpectedBehavior}()
{
	// Act
	var ex = Record.Exception(() => ${4:Action});

	// Assert
	Assert.IsType<${5:Exception}>(ex);${0}
}
endsnippet

snippet xtheorythrow "xunit theory test to check when multiple args should throw"
[Theory, MemberData(nameof(${1:ArgName}))]
public void ${2:UnitOfWork}_${3:StateUnderTest}_${4:ExceptionThrown}(${5:Args})
{
	// Arrange
	Action shouldThrow = () => ${6:Action};

	// Act
	var ex = Record.Exception(shouldThrow);

	// Assert
	Assert.IsType<${7:Exception}>(ex);${0}
}

public static IEnumerable<object[]> $1
{
	get
	{
		yield return new object[] { ${8:arg} };
	}
}
endsnippet

snippet xtheorydata "xunit theory test with data"
[Theory, MemberData(nameof(${1:ArgName}))]
public void ${2:UnitOfWork}_${3:StateUnderTest}_${4:ExpectedBehavior}(${5:Args})
{
	// Arrange

	// Act

	// Assert
}

public static IEnumerable<object[]> $1
{
	get
	{
		return new []
		{
			new object[] { ${6:arg} }${0}
		};
	}
}
endsnippet
